file structure:
WeatherCentral/
├── env (this is my python virtual environment)
└── project/
    ├── .env
    ├── manage.py
    ├── db.sqlite3.py
    └── project/
    |   ├── __pycache__/
    |   ├── __init__.py
    |   ├── asgi.py
    |   ├── settings.py
    |   ├── urls.py
    |   └── wsgi.py
    └── ForecastApp/
        ├── __pycache__.py/
        ├── migrations.py/
        ├── __init__.py
        ├── admin.py
        ├── apps.py
        ├── models.py
        ├── views.py
        ├── urls.py
        ├── templates/
        │   ├── results.html
        │   └── search.html
        ├── static/
        │   ├── resultsstyle.css
        |   ├── searchstyle.css
        │   ├── data/
        │   |	   ├── images/
        │   |	   |	├── clear.jpg
        │   |	   |	├── cloudy.jpg
        │   |	   |	├── night.jpg
        │   |	   |	├── sunny.jpg
        │   |	   |	├── locateme.png
        │   |	   |	└── submit.png
        │   |	   └── icons/
        │   |	   		└── tabicon.ico
        │   └── script.js
        └── tests.py

NOTES:
-i will show you my programs, if i dont show any of the files, assume its the one django created for me.

manage.py:
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

asgi.py:
import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')

application = get_asgi_application()

settings.py:
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)#yot2879(di=z66qt779yv!6(=ohzc)g+!&p9lg9xa91(bnb*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1'
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ForecastApp'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# API KEYS
OPENWEATHER_API_KEY= '94d9c2a5ad37d7913d00115ec3f99568'
GOOGLE_MAPS_API_KEY= 'AIzaSyBb50IRzOvaMcEfMizw_GewBK3wK0rQpSw'

project/urls.py:
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('ForecastApp.urls')),
]

wsgi.py:
import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')

application = get_wsgi_application()

admin.py:
from django.contrib import admin

# Register your models here.

apps.py:
from django.apps import AppConfig

class WeatherappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'ForecastApp'

models.py:
from django.db import models

# Create your models here.

views.py:
from django.shortcuts import render
from django.conf import settings
from django.http import JsonResponse
from django.views import View
import requests
import json
from pytz import timezone
from datetime import datetime
import geocoder

def index(request):
    return render(request, 'index.html')

OPENWEATHER_API_KEY = settings.OPENWEATHER_API_KEY
GOOGLE_MAPS_API_KEY = settings.GOOGLE_MAPS_API_KEY

class WeatherView(View):
    def post(self, request):
        data = json.loads(request.body.decode('utf-8'))
        address_input = data.get("address", "")
        metric_input = data.get("metric", "C")

        if address_input.lower() == "current":
            g = geocoder.ip('me')
            latitude = g.latlng[0]
            longitude = g.latlng[1]
        else:
            try:
                response = requests.get(f"https://maps.googleapis.com/maps/api/geocode/json?address={address_input}&key={GOOGLE_MAPS_API_KEY}")
                if response.status_code != 200:
                    return JsonResponse({"error": "Invalid address"}, status=400)
                location_data = response.json()
                latitude = location_data['results'][0]['geometry']['location']['lat']
                longitude = location_data['results'][0]['geometry']['location']['lng']
            except:
                return JsonResponse({"error": "Invalid address"}, status=400)

        try:
            response = requests.get(f"http://api.openweathermap.org/data/2.5/onecall?lat={latitude}&lon={longitude}&appid={OPENWEATHER_API_KEY}")
            parsed_json = response.json()
        except:
            return JsonResponse({"error": "Invalid API key"}, status=400)

        def convert_temp(kelvin, metric, *args, **kwargs):
            if metric == 'C':
                return int(round(kelvin - 273.15, 0))
            elif metric == 'F':
                return int(round((kelvin - 273.15) * 9/5 + 32, 0))

        daily_data = parsed_json['daily'][1:8]
        hourly_data = parsed_json['hourly']

        hourly_data = parsed_json['hourly']
        current_temp = convert_temp(hourly_data[0]['temp'], metric_input)
        highest_temp = max([convert_temp(hour['temp'], metric_input) for hour in hourly_data])
        lowest_temp = min([convert_temp(hour['temp'], metric_input) for hour in hourly_data])

        # Get the local timezone
        local_tz = timezone(parsed_json['timezone'])
        local_dt = datetime.now(local_tz)
        current_local_time = local_dt.hour

        hourly_forecast = []

        for i in range(24):
            time = (current_local_time + i + 1) % 24
            temp = convert_temp(hourly_data[i]['temp'], metric_input)
            hourly_forecast.append({
                "time": f"{time:02d}:00",
                "temperature": f"{temp}°{metric_input}"
            })

        # Extract the weather description from the API response
        weather_description = parsed_json['hourly'][0]['weather'][0]['main']

        # Extract relevant forecast data
        forecast_days = []
        for day_data in daily_data:
            date = datetime.utcfromtimestamp(day_data['dt']).strftime('%Y-%m-%d')
            max_temp = convert_temp(day_data['temp']['max'], metric_input)
            min_temp = convert_temp(day_data['temp']['min'], metric_input)
            weather_description = day_data['weather'][0]['main']

            forecast_days.append({
                "date": date,
                "max_temp": f"{max_temp}°{metric_input}",
                "min_temp": f"{min_temp}°{metric_input}",
                "weather_description": weather_description
            })

        # Determine the image based on the time of day
        current_local_time = current_local_time % 24  # Ensure it's within 0-23
        print(weather_description)

        # Determine the image based on the weather description
        if (6 <= current_local_time < 18): # Daytime
            # Daytime
            if weather_description == 'Clear':
                weather_image = 'sunny.jpg'
            elif weather_description == 'Clouds':
                weather_image = 'cloudy.jpg'
            else:
                weather_image = 'clear.jpg'

        else: # Nighttime
            if weather_description == 'Clear':
                weather_image = 'night.jpg'
            else:
                weather_image = 'clear.jpg'


        return JsonResponse({
            "current_temp": f"{current_temp}°{metric_input}",
            "highest_temp": f"{highest_temp}°{metric_input}",
            "lowest_temp": f"{lowest_temp}°{metric_input}",
            "hourly_forecast": hourly_forecast,
            "weather_image": weather_image,
            "forecast_days": forecast_days
        })

ForecastApp/urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('get_weather/', views.WeatherView.as_view(), name='get_weather'),
]

index.html:
{% load static %}
<!DOCTYPE html>
<html>
<head>
  <title>Weather App</title>
  <link rel="stylesheet" type="text/css" href="{% static 'style.css' %}">
</head>
<body>
  <form>
    {% csrf_token %}
  </form>

  <input id="address-input" type="text" placeholder="Enter address or type 'current'">
  <select id="metric-dropdown">
    <option value="C">°C</option>
    <option value="F">°F</option>
  </select>

  <div class="container"> <!-- New container div -->
    <div class="rounded-container">
      <div class="roundedCorner" id="roundedCorner">
        <p id="current-temp"></p>
        <p id="highest-temp"></p>
        <p id="lowest-temp"></p>
      </div>
    </div>
    <button id="submit-button">Get Weather</button> <!-- Moved inside container div -->
  </div>

  <div id="forecast-container">
    {% for day in forecast_days %}
      <div class="forecast-item">
        <div class="day-date">{{ day.date }}</div>
        <div class="high">H: {{ day.max_temp }}</div>
        <div class="low">L: {{ day.min_temp }}</div>
        <div class="desc">{{ day.weather_description }}</div>
      </div>
    {% endfor %}
  </div>

  <table border="1"> <!-- You can add borders for visualization, but it's optional -->
    <tr>
        <td>  24 Hour Forecast  </td>
        <td>   7 Day Forecast  </td>
    </tr>
    <tr>
        <td><div id="hourly-forecast"></div></td>
        <td><div id="forecastdays"></div></td>
    </tr>
</table>
<script src="{% static 'script.js' %}"></script>
</body>
</html>

script.js:
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      // Check if the cookie name matches the desired name
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}

function formatDate(dateString) {
  const date = new Date(dateString);
  const day = date.getDate();
  let suffix = "th";
  if (day === 1 || day === 21 || day === 31) {
    suffix = "st";
  } else if (day === 2 || day === 22) {
    suffix = "nd";
  } else if (day === 3 || day === 23) {
    suffix = "rd";
  }

  const options = { weekday: 'long', month: 'long', day: 'numeric' };
  const formattedDate = new Intl.DateTimeFormat('en-US', options).format(date);

  // Splitting and adding the suffix
  const parts = formattedDate.split(" ");
  parts[parts.length - 1] = parts[parts.length - 1] + suffix;

  return parts.join(" ");
}

window.onload = function() {
  const csrfToken = getCookie('csrftoken');
  fetch("http://127.0.0.1:8000/get_weather/", {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRFToken': csrfToken
    },
    body: JSON.stringify({
      "address": "current",
      "metric": "C" // You can set this to "F" or make it configurable
    })
  })
  .then(response => response.json())
  .then(data => {
    document.getElementById("current-temp").innerText = data.current_temp;
    document.getElementById("highest-temp").innerText = "H: " + data.highest_temp;
    document.getElementById("lowest-temp").innerText = "L: " + data.lowest_temp;

    // New code to update the background image of the entire body
    document.body.style.backgroundImage = `url('/static/data/images/${data.weather_image}')`;
    roundedCornerDiv.style.backgroundImage = `url('/static/data/images/${data.weather_image}')`;

    // New code to handle hourly forecast
    const hourlyForecastDiv = document.getElementById("hourly-forecast");
    let forecastHTMLHourly = " ";

    // 7 Day Forecast
    const weeklyForecastDiv = document.getElementById("forecastdays");
    let forecastHTMLWeekly = " ";

    data.hourly_forecast.forEach(hour => {
      forecastHTMLHourly += `<p>${hour.time}: ${hour.temperature}</p>`;
    });

    hourlyForecastDiv.innerHTML = forecastHTMLHourly;

    data.forecast_days.forEach(day => {
      const formattedDate = formatDate(day.date);
      forecastHTMLWeekly += `<p>${formattedDate}: H: ${day.max_temp} L: ${day.min_temp} ${day.weather_description}</p>`;
});

weeklyForecastDiv.innerHTML = forecastHTMLWeekly;

  });
};

// Wrap your code inside the DOMContentLoaded event listener
document.addEventListener("DOMContentLoaded", function() {
  // Get the submit button element
  const submitButton = document.getElementById("submit-button");

  // Add an event listener to the submit button
  submitButton.addEventListener("click", function() {
    // Get input values from HTML fields
    const address = document.getElementById("address-input").value;
    const metric = document.getElementById("metric-dropdown").value;

    // Get the CSRF token from the cookie
    const csrfToken = getCookie("csrftoken");

    // Make the fetch API call to Django with the CSRF token
    fetch("http://127.0.0.1:8000/get_weather/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        // Include the CSRF token in the headers
        "X-CSRFToken": csrfToken,
      },
      body: JSON.stringify({
        "address": address,
        "metric": metric
      }),
    })
    .then(response => response.json())
    .then(data => {
      // Existing code
      document.getElementById("current-temp").innerText = data.current_temp;
      document.getElementById("highest-temp").innerText = "H: " + data.highest_temp;
      document.getElementById("lowest-temp").innerText = "L: " + data.lowest_temp;

      // New code to set the weather image
      const roundedCornerDiv = document.getElementById("roundedCorner");
      roundedCornerDiv.style.backgroundImage = `url('/static/data/images/${data.weather_image}')`;
      // New code to update the background image of the entire body
      document.body.style.backgroundImage = `url('/static/data/images/${data.weather_image}')`;

      // New code to handle hourly forecast
      const hourlyForecastDiv = document.getElementById("hourly-forecast");
      let forecastHTMLHourly = " ";

      // 7 Day Forecast
      const weeklyForecastDiv = document.getElementById("forecastdays");
      let forecastHTMLWeekly = " ";

      data.hourly_forecast.forEach(hour => {
        forecastHTMLHourly += `<p>${hour.time}: ${hour.temperature}</p>`;
      });

      hourlyForecastDiv.innerHTML = forecastHTMLHourly;

      data.forecast_days.forEach(day => {
        const formattedDate = formatDate(day.date);
        forecastHTMLWeekly += `<p>${formattedDate}: H: ${day.max_temp} L: ${day.min_temp} ${day.weather_description}</p>`;
      });

      weeklyForecastDiv.innerHTML = forecastHTMLWeekly;
    })
    .catch(error => {
      console.log("Error:", error);
    });
  });
});

style.css:
/* Reset some default browser styles */
body, h1, h2, h3, p, ul, li {
  margin: 0;
  padding: 0;
}

/* Add background color and font settings */
body {
  background-color: #434040;
  background-image: url('data/images/sunny.jpg');
  background-size: cover;
  background-repeat: no-repeat;
  background-attachment: fixed;  /* The background image will not scroll with the page */
  background-position: right top;  /* Align the image to the top right corner */
  font-family: Arial, Helvetica, sans-serif;
  color: #bdbdbd;
  line-height: 1.6;
  margin: 20px;
  margin-top: 100px;
}

/* Container Setup */
.container {
  width: 80%;
  margin: auto;
  overflow: hidden;
  display: flex; /* Adding Flexbox here */
  justify-content: space-between; /* or 'space-around', depending on preference */
  align-items: center; /* vertical alignment */
}

/* Header Styles */
header {
  background: #50b3a2;
  color: rgb(0, 0, 0);
  text-align: center;
  padding: 1rem;
}

header h1 {
  margin: 0;
  padding: 0.5rem;
  font-size: 2rem;
}

/* Search Bar Styles */
#address-input {
  display: block;
  width: 100%;
  max-width: 300px; /* adjust as needed */
  align-items: center;
}

#metric-dropdown {
  margin-bottom: 0px;
}

/* New Style */
.flex-container {
  display: flex;
  justify-content: flex-start;
  align-items: center;
}

#submit-button {
  max-width: 200px;
  margin-left: 20px;  /* added a margin to separate it from the dropdown */
  right: 500px;
}

/* Button Styles */
button {
  background: #50b3a2;
  color: #fff;
  border: none;
  padding: 10px 20px;
  cursor: pointer;
}

/* Input Fields */
input[type="text"], input[type="radio"] {
  padding: 8px;
  margin: 10px 1px;
  border: 1px solid #ccc;
}

.rounded-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 30vh;
  left: 10%;
}

.roundedCorner {
  width: 250px;
  height: 125px;
  border: solid 1px #555;
  background-image: url('data/images/sunny.jpg');
  background-size: cover;
  background-position: top center;
  box-shadow: 5px 5px 5px rgba(50, 50, 50, 0.6);
  -moz-box-shadow: 10px 5px 5px rgba(0,0,0,0.6);
  -webkit-box-shadow: 10px 5px 5px rgba(0,0,0,0.6);
  -o-box-shadow: 10px 5px 5px rgba(0,0,0,0.6);
  border-radius: 25px;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  }

  #current-temp {
    color: black;
    font-size: xx-large;
    font-weight: 30;
    font-family: Marker Felt, fantasy;
    position: absolute;
    top: 2px;
    left: 10px;
  }

  #highest-temp {
    color:black;
    font-size: large;
    font-weight: bold;
    position: absolute;
    bottom: 30px;
    left: 180px;
    justify-content: left;
  }

  #lowest-temp {
    color:rgb(0, 0, 0);
    font-size: large;
    font-weight: bold;
    position: absolute;
    bottom: 5px;
    left: 180px;
    justify-content: left;
  }

  table {
    width: 100%;
    table-layout: fixed;
    border-collapse: collapse;
    text-align: center;
  }

tests.py:
from django.test import TestCase

# Create your tests here.